<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Web Tools | Color Generator & Text Counter</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            scroll-behavior: smooth;
        }
        /* App Switcher Styles */
        .nav-button {
            padding: 0.6rem 1.25rem;
            font-size: 0.95rem;
            font-weight: 600;
            border-radius: 9999px;
            border: 2px solid transparent;
            transition: all 0.3s ease;
            color: #475569; /* slate-600 */
        }
        .nav-button:hover {
            background-color: #f1f5f9; /* slate-100 */
        }
        .active-nav-button {
            color: #4f46e5; /* indigo-600 */
            border-color: #a5b4fc; /* indigo-300 */
            background-color: #eef2ff; /* indigo-50 */
        }
        /* Utility */
        .hidden {
            display: none;
        }
        /* Custom scrollbar for better aesthetics */
        ::-webkit-scrollbar { width: 8px; }
        ::-webkit-scrollbar-track { background: #f1f5f9; }
        ::-webkit-scrollbar-thumb { background: #94a3b8; border-radius: 10px; }
        ::-webkit-scrollbar-thumb:hover { background: #64748b; }
        
        /* Styles from Color Generator */
        .color-card-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
            gap: 1.5rem;
        }
        input:disabled {
            background-color: #e2e8f0;
            cursor: not-allowed;
        }
        .feedback-anim { animation: fadeAndScale 1s ease-out forwards; }
        @keyframes fadeAndScale {
            0% { opacity: 1; transform: translate(-50%, -50%) scale(0.8); }
            100% { opacity: 0; transform: translate(-50%, -50%) scale(1.2); }
        }
        .panel-fade-in { animation: fadeIn 0.5s ease-in-out; }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Styles from Text Counter */
        .stat-card { transition: all 0.3s ease; }
    </style>
</head>
<body class="bg-slate-100 text-slate-800 antialiased">

    <nav class="bg-white/80 backdrop-blur-lg shadow-sm sticky top-0 z-20">
        <div class="container mx-auto px-4 py-3 flex justify-center gap-2 md:gap-4">
            <button id="show-color-btn" class="nav-button active-nav-button">ðŸŽ¨ Color Generator</button>
            <button id="show-counter-btn" class="nav-button">ðŸ”¢ Text Counter</button>
        </div>
    </nav>

    <main>
        <div id="color-generator-app">
            <div class="container mx-auto px-4 py-8 md:py-12">
                <header class="text-center mb-8 md:mb-12">
                    <h1 class="text-4xl md:text-5xl font-bold text-slate-900">Advanced Color Palette Generator</h1>
                    <p class="mt-3 text-lg text-slate-600 max-w-3xl mx-auto">Select a colormap to generate a palette. Click a color to copy its code and reveal a full spectrum of tints, tones, and shades.</p>
                </header>
                <div class="bg-white p-6 rounded-2xl shadow-lg mb-8 md:mb-12 sticky top-[74px] z-10">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="colormap-select" class="block text-sm font-medium text-slate-700 mb-2">Colormap</label>
                            <select id="colormap-select" class="w-full p-3 bg-slate-50 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition"></select>
                        </div>
                        <div>
                            <label for="color-count" class="block text-sm font-medium text-slate-700 mb-2">Number of Colors (2-256)</label>
                            <input type="number" id="color-count" value="16" min="2" max="256" class="w-full p-3 bg-slate-50 border border-slate-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition">
                        </div>
                    </div>
                </div>
                <div id="palette-display" class="color-card-container"></div>
                <div id="shade-panel-container" class="mt-12"></div>
            </div>
            <footer class="text-center text-sm text-slate-500 py-8">
                Created by <a href="https://github.com/dzyla" class="text-indigo-600 hover:underline">Dawid Zyla</a>
            </footer>
        </div>

        <div id="text-counter-app" class="hidden">
            <div class="flex items-center justify-center py-8 md:py-12 px-4">
                <div class="w-full max-w-3xl mx-auto bg-white dark:bg-gray-800 rounded-2xl shadow-2xl p-6 md:p-8">
                    <div class="text-center mb-6">
                        <h1 class="text-3xl md:text-4xl font-bold text-gray-900 dark:text-white">Text Counter</h1>
                        <p class="text-gray-500 dark:text-gray-400 mt-2">Instantly analyze your text's word, letter, and space count.</p>
                    </div>
                    <div class="mb-6">
                        <textarea id="text-input" class="w-full h-48 p-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition duration-200 resize-none" placeholder="Start typing or paste your text here..."></textarea>
                    </div>
                    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6 text-center">
                        <div class="stat-card bg-blue-100 dark:bg-blue-900/50 p-4 rounded-lg">
                            <p class="text-sm font-medium text-blue-600 dark:text-blue-300">Words</p>
                            <p id="word-count" class="text-3xl font-bold text-blue-800 dark:text-blue-200">0</p>
                        </div>
                        <div class="stat-card bg-green-100 dark:bg-green-900/50 p-4 rounded-lg">
                            <p class="text-sm font-medium text-green-600 dark:text-green-300">Letters</p>
                            <p id="letter-count" class="text-3xl font-bold text-green-800 dark:text-green-200">0</p>
                        </div>
                        <div class="stat-card bg-purple-100 dark:bg-purple-900/50 p-4 rounded-lg">
                            <p class="text-sm font-medium text-purple-600 dark:text-purple-300">Spaces</p>
                            <p id="space-count" class="text-3xl font-bold text-purple-800 dark:text-purple-200">0</p>
                        </div>
                        <div class="stat-card bg-yellow-100 dark:bg-yellow-900/50 p-4 rounded-lg">
                            <p class="text-sm font-medium text-yellow-600 dark:text-yellow-300">Articles</p>
                            <p id="article-count" class="text-3xl font-bold text-yellow-800 dark:text-yellow-200">0</p>
                        </div>
                    </div>
                    <div class="flex flex-col md:flex-row items-center justify-between gap-4 p-4 bg-gray-50 dark:bg-gray-700/50 rounded-lg">
                        <div class="flex flex-col sm:flex-row gap-4">
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="count-spaces-toggle" class="form-checkbox h-5 w-5 text-blue-600 rounded focus:ring-blue-500">
                                <span class="text-gray-700 dark:text-gray-300">Include spaces in letter count</span>
                            </label>
                            <label class="flex items-center space-x-2 cursor-pointer">
                                <input type="checkbox" id="count-articles-toggle" checked class="form-checkbox h-5 w-5 text-yellow-600 rounded focus:ring-yellow-500">
                                <span class="text-gray-700 dark:text-gray-300">Count articles ('a', 'an', 'the')</span>
                            </label>
                        </div>
                        <button id="clear-btn" class="w-full md:w-auto bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-6 rounded-lg transition duration-200">Clear</button>
                    </div>
                </div>
            </div>
             <footer class="text-center text-sm text-slate-500 py-8">
                Created by <a href="https://github.com/dzyla" class="text-indigo-600 hover:underline">Dawid Zyla</a>
            </footer>
        </div>
    </main>

    <script>
        document.addEventListener('DOMContentLoaded', () => {

            // --- APP SWITCHER LOGIC ---
            const colorGeneratorApp = document.getElementById('color-generator-app');
            const textCounterApp = document.getElementById('text-counter-app');
            const showColorBtn = document.getElementById('show-color-btn');
            const showCounterBtn = document.getElementById('show-counter-btn');

            showColorBtn.addEventListener('click', () => {
                colorGeneratorApp.classList.remove('hidden');
                textCounterApp.classList.add('hidden');
                showColorBtn.classList.add('active-nav-button');
                showCounterBtn.classList.remove('active-nav-button');
            });

            showCounterBtn.addEventListener('click', () => {
                textCounterApp.classList.remove('hidden');
                colorGeneratorApp.classList.add('hidden');
                showCounterBtn.classList.add('active-nav-button');
                showColorBtn.classList.remove('active-nav-button');
            });
            
            // --- COLOR GENERATOR LOGIC ---
            (function() {
                const colorSchemes = {
                    'Sequential (Multi-Hue)': ['interpolateViridis', 'interpolatePlasma', 'interpolateInferno', 'interpolateMagma', 'interpolateCividis', 'interpolateTurbo', 'interpolateWarm', 'interpolateCool', 'interpolateBuGn', 'interpolateBuPu', 'interpolateGnBu', 'interpolateOrRd', 'interpolatePuBuGn', 'interpolatePuBu', 'interpolatePuRd', 'interpolateRdPu', 'interpolateYlGnBu', 'interpolateYlGn', 'interpolateYlOrBr', 'interpolateYlOrRd'],
                    'Sequential (Single Hue)': ['interpolateBlues', 'interpolateGreens', 'interpolateGreys', 'interpolateOranges', 'interpolatePurples', 'interpolateReds'],
                    'Diverging': ['interpolateBrBG', 'interpolatePRGn', 'interpolatePiYG', 'interpolatePuOr', 'interpolateRdBu', 'interpolateRdGy', 'interpolateRdYlBu', 'interpolateRdYlGn', 'interpolateSpectral'],
                    'Cyclical': ['interpolateRainbow', 'interpolateSinebow'],
                    'Categorical (Fixed Size)': ['schemeAccent', 'schemeDark2', 'schemePaired', 'schemePastel1', 'schemePastel2', 'schemeSet1', 'schemeSet2', 'schemeSet3', 'schemeTableau10', 'schemeCategory10']
                };

                const colormapSelect = document.getElementById('colormap-select');
                const colorCountInput = document.getElementById('color-count');
                const paletteDisplay = document.getElementById('palette-display');
                const shadePanelContainer = document.getElementById('shade-panel-container');
                let activeColorCard = null;

                function generatePalette() {
                    const selectedSchemeName = colormapSelect.value;
                    let palette = [];
                    if (selectedSchemeName.startsWith('scheme')) {
                        colorCountInput.disabled = true;
                        const scheme = d3[selectedSchemeName];
                        if (Array.isArray(scheme)) {
                            palette = scheme.map(c => d3.color(c).formatHex());
                            colorCountInput.value = scheme.length;
                        }
                    } else {
                        colorCountInput.disabled = false;
                        let colorCount = parseInt(colorCountInput.value, 10);
                        if (isNaN(colorCount) || colorCount < 2) colorCount = 2;
                        if (colorCount > 256) colorCount = 256;
                        colorCountInput.value = colorCount;
                        const interpolator = d3[selectedSchemeName];
                        if (typeof interpolator !== 'function') return [];
                        for (let i = 0; i < colorCount; i++) {
                            const t = (colorCount > 1) ? i / (colorCount - 1) : 0.5;
                            palette.push(d3.color(interpolator(t)).formatHex());
                        }
                    }
                    return palette;
                }

                function updateDisplay() {
                    const palette = generatePalette();
                    paletteDisplay.innerHTML = '';
                    shadePanelContainer.innerHTML = '';
                    activeColorCard = null;
                    palette.forEach(hex => {
                        const colorCard = document.createElement('div');
                        colorCard.className = 'relative group cursor-pointer transform hover:-translate-y-1 transition-transform duration-300 focus-within:ring-2 focus-within:ring-offset-2 focus-within:ring-indigo-500 rounded-lg';
                        colorCard.dataset.color = hex;
                        colorCard.innerHTML = `
                            <div style="background-color: ${hex};" class="w-full h-24 rounded-t-lg shadow-md"></div>
                            <div class="p-3 bg-white rounded-b-lg shadow-md">
                                <p class="font-mono text-sm text-slate-700 font-medium">${hex}</p>
                            </div>
                        `;
                        colorCard.addEventListener('click', () => {
                            copyToClipboard(hex, colorCard.querySelector('div[style]'));
                            showShadePanel(hex, colorCard);
                        });
                        paletteDisplay.appendChild(colorCard);
                    });
                }
                
                function generateShades(baseHex) {
                    const baseColor = d3.hsl(baseHex);
                    const variations = { tints: [], tones: [], shades: [] };
                    const steps = 5;
                    for (let i = 1; i <= steps; i++) {
                        variations.tints.push(baseColor.brighter(i * 0.35).formatHex());
                    }
                    for (let i = 1; i <= steps; i++) {
                        variations.shades.push(baseColor.darker(i * 0.35).formatHex());
                    }
                    for (let i = 1; i <= steps; i++) {
                        const tonedColor = d3.hsl(baseColor.h, baseColor.s * (1 - (i * 0.18)), baseColor.l);
                        variations.tones.push(tonedColor.formatHex());
                    }
                    return variations;
                }

                function showShadePanel(hex, cardElement) {
                    if (activeColorCard) {
                        activeColorCard.classList.remove('ring-2', 'ring-offset-2', 'ring-indigo-500');
                    }
                    cardElement.classList.add('ring-2', 'ring-offset-2', 'ring-indigo-500');
                    activeColorCard = cardElement;
                    const variations = generateShades(hex);
                    const createVariationRow = (title, colors) => {
                        const colorSwatches = colors.map(color => `
                            <div class="flex-1 group" title="Click to copy ${color}">
                                <div data-color="${color}" class="shade-swatch h-16 w-full rounded-md cursor-pointer border border-slate-200 transition-transform duration-200 group-hover:scale-105" style="background-color: ${color};"></div>
                                <p class="text-center text-xs mt-2 font-mono text-slate-600">${color}</p>
                            </div>
                        `).join('');
                        return `
                            <div>
                                <h4 class="font-bold text-slate-700 mb-3">${title}</h4>
                                <div class="flex flex-row gap-2 md:gap-4">${colorSwatches}</div>
                            </div>
                        `;
                    };
                    shadePanelContainer.innerHTML = `
                        <div id="shade-panel" class="bg-white p-6 md:p-8 rounded-2xl shadow-xl panel-fade-in">
                            <div class="flex flex-col md:flex-row md:items-center justify-between mb-6 border-b border-slate-200 pb-4">
                                <div>
                                    <h3 class="text-2xl font-bold text-slate-900">Color Variations</h3>
                                    <p class="text-slate-500">Tints, tones, and shades for your selected color.</p>
                                </div>
                                <div class="flex items-center gap-3 mt-4 md:mt-0">
                                    <div class="w-10 h-10 rounded-full shadow-inner" style="background-color:${hex};"></div>
                                    <span class="font-mono text-lg text-slate-800">${hex}</span>
                                </div>
                            </div>
                            <div class="space-y-6">
                                ${createVariationRow('Tints (Lighter)', variations.tints.reverse())}
                                ${createVariationRow('Tones (Desaturated)', variations.tones)}
                                ${createVariationRow('Shades (Darker)', variations.shades)}
                            </div>
                        </div>
                    `;
                    document.getElementById('shade-panel').scrollIntoView({ behavior: 'smooth', block: 'center' });
                    shadePanelContainer.querySelectorAll('.shade-swatch').forEach(swatch => {
                        swatch.addEventListener('click', (e) => {
                            e.stopPropagation();
                            copyToClipboard(swatch.dataset.color, swatch);
                        });
                    });
                }

                function copyToClipboard(text, element) {
                    navigator.clipboard.writeText(text);
                    const feedback = document.createElement('div');
                    feedback.textContent = 'Copied!';
                    feedback.className = 'absolute top-1/2 left-1/2 bg-slate-900 bg-opacity-80 text-white text-xs font-bold px-3 py-1 rounded-full feedback-anim pointer-events-none';
                    element.style.position = 'relative';
                    element.appendChild(feedback);
                    setTimeout(() => feedback.remove(), 1000);
                }

                function initColorGenerator() {
                    for (const groupName in colorSchemes) {
                        const optgroup = document.createElement('optgroup');
                        optgroup.label = groupName;
                        colorSchemes[groupName].forEach(name => {
                            const option = document.createElement('option');
                            option.value = name;
                            option.textContent = name.replace(/^(interpolate|scheme)/, '').replace(/([A-Z])/g, ' $1').trim();
                            optgroup.appendChild(option);
                        });
                        colormapSelect.appendChild(optgroup);
                    }
                    colormapSelect.addEventListener('change', updateDisplay);
                    colorCountInput.addEventListener('change', updateDisplay);
                    let inputTimeout;
                    colorCountInput.addEventListener('input', () => {
                        clearTimeout(inputTimeout);
                        inputTimeout = setTimeout(updateDisplay, 350);
                    });
                    updateDisplay();
                }
                initColorGenerator();
            })();

            // --- TEXT COUNTER LOGIC ---
            (function() {
                const textInput = document.getElementById('text-input');
                const wordCountEl = document.getElementById('word-count');
                const letterCountEl = document.getElementById('letter-count');
                const spaceCountEl = document.getElementById('space-count');
                const articleCountEl = document.getElementById('article-count');
                const countSpacesToggle = document.getElementById('count-spaces-toggle');
                const countArticlesToggle = document.getElementById('count-articles-toggle');
                const clearBtn = document.getElementById('clear-btn');

                function updateCounts() {
                    const text = textInput.value;
                    const words = text.trim().split(/\s+/).filter(word => word.length > 0);
                    const totalWordCount = words.length;
                    const articleMatches = text.match(/\b(a|an|the)\b/gi);
                    const articleCount = articleMatches ? articleMatches.length : 0;
                    
                    letterCountEl.textContent = countSpacesToggle.checked ? text.length : text.replace(/\s/g, '').length;
                    const spaceMatches = text.match(/ /g);
                    spaceCountEl.textContent = spaceMatches ? spaceMatches.length : 0;
                    
                    if (countArticlesToggle.checked) {
                        wordCountEl.textContent = totalWordCount;
                        articleCountEl.textContent = articleCount;
                    } else {
                        wordCountEl.textContent = totalWordCount - articleCount;
                        articleCountEl.textContent = 0;
                    }
                }

                function clearAll() {
                    textInput.value = '';
                    updateCounts();
                }
                
                function initTextCounter() {
                    textInput.addEventListener('input', updateCounts);
                    countSpacesToggle.addEventListener('change', updateCounts);
                    countArticlesToggle.addEventListener('change', updateCounts);
                    clearBtn.addEventListener('click', clearAll);
                    updateCounts(); // Initial count on load
                }
                initTextCounter();
            })();
        });
    </script>
</body>
</html>
